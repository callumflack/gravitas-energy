@charset "UTF-8";

/* ===============================================================================

    This brand identity and website was made by Patternworks for ellisjones.com.au
    in December 2015. Check out http:\\pattern.works to learn more.

   =============================================================================== */

/**
 * Import libraries
 */

/*! normalize.css v3.0.1 | MIT License | git.io/normalize */

/**
 * 1. Set default font family to sans-serif.
 * 2. Prevent iOS text size adjust after orientation change, without disabling
 *    user zoom.
 */

html {
  font-family: sans-serif;
  /* 1 */
  -ms-text-size-adjust: 100%;
  /* 2 */
  -webkit-text-size-adjust: 100%;
  /* 2 */
}

/**
 * Remove default margin.
 */

body {
  margin: 0;
}

/* HTML5 display definitions
   ========================================================================== */

/**
 * Correct `block` display not defined for any HTML5 element in IE 8/9.
 * Correct `block` display not defined for `details` or `summary` in IE 10/11 and Firefox.
 * Correct `block` display not defined for `main` in IE 11.
 */

article,
footer,
header,
nav,
section {
  display: block;
}

/**
 * 1. Correct `inline-block` display not defined in IE 8/9.
 * 2. Normalize vertical alignment of `progress` in Chrome, Firefox, and Opera.
 */

/**
 * Prevent modern browsers from displaying `audio` without controls.
 * Remove excess height in iOS 5 devices.
 */

/**
 * Address `[hidden]` styling not present in IE 8/9/10.
 * Hide the `template` element in IE 8/9/11, Safari, and Firefox < 22.
 */

/* Links
   ========================================================================== */

/**
 * Remove the gray background color from active links in IE 10.
 */

a {
  background: transparent;
}

/**
 * Improve readability when focused and also mouse hovered in all browsers.
 */

a:active,
a:hover {
  outline: 0;
}

/* Text-level semantics
   ========================================================================== */

/**
 * Address styling not present in IE 8/9/10/11, Safari, and Chrome.
 */

/**
 * Address style set to `bolder` in Firefox 4+, Safari, and Chrome.
 */

/**
 * Address styling not present in Safari and Chrome.
 */

/**
 * Address variable `h1` font-size and margin within `section` and `article`
 * contexts in Firefox 4+, Safari, and Chrome.
 */

h1 {
  font-size: 2em;
  margin: 0.67em 0;
}

/**
 * Address styling not present in IE 8/9.
 */

/**
 * Address inconsistent and variable font size in all browsers.
 */

/**
 * Prevent `sub` and `sup` affecting `line-height` in all browsers.
 */

/* Embedded content
   ========================================================================== */

/**
 * Remove border when inside `a` element in IE 8/9/10.
 */

img {
  border: 0;
}

/**
 * Correct overflow not hidden in IE 9/10/11.
 */

/* Grouping content
   ========================================================================== */

/**
 * Address margin not present in IE 8/9 and Safari.
 */

/**
 * Address differences between Firefox and other browsers.
 */

/**
 * Contain overflow in all browsers.
 */

/**
 * Address odd `em`-unit font size rendering in all browsers.
 */

/* Forms
   ========================================================================== */

/**
 * Known limitation: by default, Chrome and Safari on OS X allow very limited
 * styling of `select`, unless a `border` property is set.
 */

/**
 * 1. Correct color not being inherited.
 *    Known issue: affects color of disabled elements.
 * 2. Correct font properties not being inherited.
 * 3. Address margins set differently in Firefox 4+, Safari, and Chrome.
 */

button,
input,
select,
textarea {
  color: inherit;
  /* 1 */
  font: inherit;
  /* 2 */
  margin: 0;
  /* 3 */
}

/**
 * Address `overflow` set to `hidden` in IE 8/9/10/11.
 */

button {
  overflow: visible;
}

/**
 * Address inconsistent `text-transform` inheritance for `button` and `select`.
 * All other form control elements do not inherit `text-transform` values.
 * Correct `button` style inheritance in Firefox, IE 8/9/10/11, and Opera.
 * Correct `select` style inheritance in Firefox.
 */

button,
select {
  text-transform: none;
}

/**
 * 1. Avoid the WebKit bug in Android 4.0.* where (2) destroys native `audio`
 *    and `video` controls.
 * 2. Correct inability to style clickable `input` types in iOS.
 * 3. Improve usability and consistency of cursor style between image-type
 *    `input` and others.
 */

button {
  -webkit-appearance: button;
  /* 2 */
  cursor: pointer;
  /* 3 */
}

/**
 * Re-set default cursor for disabled elements.
 */

/**
 * Remove inner padding and border in Firefox 4+.
 */

button::-moz-focus-inner,
input::-moz-focus-inner {
  border: 0;
  padding: 0;
}

/**
 * Address Firefox 4+ setting `line-height` on `input` using `!important` in
 * the UA stylesheet.
 */

input {
  line-height: normal;
}

/**
 * It's recommended that you don't attempt to style these elements.
 * Firefox's implementation doesn't respect box-sizing, padding, or width.
 *
 * 1. Address box sizing set to `content-box` in IE 8/9/10.
 * 2. Remove excess padding in IE 8/9/10.
 */

/**
 * Fix the cursor style for Chrome's increment/decrement buttons. For certain
 * `font-size` values of the `input`, it causes the cursor style of the
 * decrement button to change from `default` to `text`.
 */

/**
 * 1. Address `appearance` set to `searchfield` in Safari and Chrome.
 * 2. Address `box-sizing` set to `border-box` in Safari and Chrome
 *    (include `-moz` to future-proof).
 */

/**
 * Remove inner padding and search cancel button in Safari and Chrome on OS X.
 * Safari (but not Chrome) clips the cancel button when the search input has
 * padding (and `textfield` appearance).
 */

/**
 * Define consistent border, margin, and padding.
 */

/**
 * 1. Correct `color` not being inherited in IE 8/9/10/11.
 * 2. Remove padding so people aren't caught out if they zero out fieldsets.
 */

/**
 * Remove default vertical scrollbar in IE 8/9/10/11.
 */

textarea {
  overflow: auto;
}

/**
 * Don't inherit the `font-weight` (applied by a rule above).
 * NOTE: the default cannot safely be changed in Chrome and Safari on OS X.
 */

/* Tables
   ========================================================================== */

/**
 * Remove most spacing between table cells.
 */

/**
 * A thin layer on top of normalize.css that provides a starting point more
 * suitable for web applications. Removes the default spacing and border for
 * appropriate elements.
 */

html {
  background: inherit;
  color: inherit;
  font: 16px sans-serif;
}

a {
  color: #069;
  text-decoration: none;
}

a:hover,
a:focus,
a:active {
  color: #069;
  text-decoration: underline;
}

h1,
h2,
h3,
p {
  margin: 0;
}

button {
  background: transparent;
  border: 0;
  padding: 0;
}

/**
 * Work around a Firefox/IE bug where the transparent `button` background
 * results in a loss of the default `button` focus styles.
 */

button:focus {
  outline: 1px dotted;
  outline: 5px auto -webkit-focus-ring-color;
}

ul {
  list-style: none;
  margin: 0;
  padding: 0;
}

/**
 * Suppress the focus outline on links that cannot be accessed via keyboard.
 * This prevents an unwanted focus outline from appearing around elements that
 * might still respond to pointer events.
 */

/**
 * Vertical alignment utilities
 * Depends on an appropriate `display` value.
 */

/**
 * Display-type utilities
 */

/**
 * Completely remove from the flow but leave available to screen readers.
 */

/**
 * 1. Fix for Firefox bug: an image styled `max-width:100%` within an
 * inline-block will display at its default size, and not limit its width to
 * 100% of an ancestral container.
 */

/**
 * Contain floats
 *
 * Make an element expand to contain floated children.
 * Uses pseudo-elements (micro clearfix).
 *
 * 1. The space content is one way to avoid an Opera bug when the
 *    `contenteditable` attribute is included anywhere else in the document.
 *    Otherwise it causes space to appear at the top and bottom of the
 *    element.
 * 2. The use of `table` rather than `block` is only necessary if using
 *    `:before` to contain the top-margins of child elements.
 */

/**
 * New block formatting context
 *
 * This affords some useful properties to the element. It won't wrap under
 * floats. Will also contain any floated children.

 * N.B. This will clip overflow. Use the alternative method below if this is
 * problematic.
 */

/**
 * New block formatting context (alternative)
 *
 * Alternative method when overflow must not be clipped.
 *
 * 1. Create a new block formatting context (NBFC).
 * 2. Avoid shrink-wrap behaviour of table-cell.
 *
 * N.B. This breaks down in some browsers when elements within this element
 * exceed its width.
 */

/**
 * Floats
 */

/**
 * Clean link
 *
 * A link without any text-decoration at all.
 */

/**
 * Link complex
 *
 * A common pattern is to have a link with several pieces of text and/or an
 * icon, where only one piece of text should display the underline when the
 * link is the subject of user interaction.
 *
 * Example HTML:
 *
 * <a class="u-linkComplex" href="#">
 *   Link complex
 *   <span class="u-linkComplexTarget">target</span>
 * </a>
 */

/**
 * Block-level link
 *
 * Combination of traits commonly used in vertical navigation lists.
 */

/**
 * Specify the proportional offset after an element.
 * Intentional redundancy build into each set of unit classes.
 * Supports: 2, 4, 5, 6, 8, 10, 12 section
 */

/**
 * Specify the proportional offset before an object.
 * Intentional redundancy build into each set of unit classes.
 * Supports: 2, 3, 4, 5, 6, 8, 10, 12 section
 */

.u-before1of12 {
  margin-left: 8.333333333333332% !important;
}

.u-before3of12 {
  margin-left: 25% !important;
}

/**
 * Pins to all corners by default. But when a width and/or height are
 * provided, the element will be centered in its nearest relatively-positioned
 * ancestor.
 */

/**
 * 1. Make sure fixed elements are promoted into a new layer, for performance
 *    reasons.
 */

/**
 * Sizing utilities
 */

/* Intrinsic widths
   ========================================================================== */

/**
 * Make an element shrink wrap its content.
 */

/**
 * Make an element fill the remaining space.
 * N.B. This will hide overflow.
 */

/**
 * An alternative method to make an element fill the remaining space.
 * N.B. Do not use if child elements might be wider than the remaining space.
 * In Chrome, Safari, and Firefox it results in undesired layout.
 */

/**
 * Make an element the width of its parent.
 */

/* Proportional widths
   ========================================================================== */

/**
 * Specify the proportional width of an object.
 * Intentional redundancy build into each set of unit classes.
 * Supports: 2, 3, 4, 5, 6, 8, 10, 12 part
 */

.u-size5of12 {
  width: 41.66666666666667% !important;
}

.u-size1of2 {
  width: 50% !important;
}

.u-size7of12 {
  width: 58.333333333333336% !important;
}

.u-size9of12 {
  width: 75% !important;
}

.u-size11of12 {
  width: 91.66666666666666% !important;
}

/**
 * Size: breakpoint A1 (extra-small)
 */

@media (min-width: 600px) {
  /**
   * Make an element shrink wrap its content.
   */

  /**
   * Make an element fill the remaining space.
   * N.B. This will hide overflow.
   */

  /**
   * An alternative method to make an element fill the remaining space.
   * N.B. Do not use if child elements might be wider than the remaining space.
   * In Chrome, Safari, and Firefox it results in undesired layout.
   */

  /**
   * Make an element the width of its parent.
   */

  .u-xs-before1of12 {
    margin-left: 8.333333333333332% !important;
  }

  .u-xs-before5of12 {
    margin-left: 41.66666666666667% !important;
  }

  /* Proportional widths: breakpoint 1 (x-small)
     ========================================================================== */

  /**
   * Specify the proportional width of an object.
   * Intentional redundancy build into each set of unit classes.
   * Supports: 2, 3, 4, 5, 6, 8, 10, 12 part
   */

  .u-xs-size1of2 {
    width: 50% !important;
  }

  .u-xs-size7of12 {
    width: 58.333333333333336% !important;
  }

  .u-xs-size9of12 {
    width: 75% !important;
  }
}

/**
 * Size: breakpoint 1 (small)
 */

@media (min-width: 600px) {
  /**
   * Make an element shrink wrap its content.
   */

  /**
   * Make an element fill the remaining space.
   * N.B. This will hide overflow.
   */

  /**
   * An alternative method to make an element fill the remaining space.
   * N.B. Do not use if child elements might be wider than the remaining space.
   * In Chrome, Safari, and Firefox it results in undesired layout.
   */

  /**
   * Make an element the width of its parent.
   */

  .u-sm-before1of12 {
    margin-left: 8.333333333333332% !important;
  }

  /* Proportional widths: breakpoint 1 (small)
     ========================================================================== */

  /**
   * Specify the proportional width of an object.
   * Intentional redundancy build into each set of unit classes.
   * Supports: 2, 3, 4, 5, 6, 8, 10, 12 part
   */

  .u-sm-size7of12 {
    width: 58.333333333333336% !important;
  }
}

/**
 * Size: breakpoint 2 (medium)
 */

@media (min-width: 992px) {
  /**
   * Make an element shrink wrap its content.
   */

  /**
   * Make an element fill the remaining space.
   * N.B. This will hide overflow.
   */

  /**
   * An alternative method to make an element fill the remaining space.
   * N.B. Do not use if child elements might be wider than the remaining space.
   * In Chrome, Safari, and Firefox it results in undesired layout.
   */

  /**
   * Make an element the width of its parent.
   */

  /* Proportional widths: breakpoint 2 (medium)
     ========================================================================== */

  /**
   * Specify the proportional width of an object.
   * Intentional redundancy build into each set of unit classes.
   * Supports: 2, 3, 4, 5, 6, 8, 10, 12 part
   */
}

/**
 * Size: breakpoint 3 (large)
 */

@media (min-width: 960px) {
  /**
   * Make an element shrink wrap its content.
   */

  /**
   * Make an element fill the remaining space.
   * N.B. This will hide overflow.
   */

  /**
   * An alternative method to make an element fill the remaining space.
   * N.B. Do not use if child elements might be wider than the remaining space.
   * In Chrome, Safari, and Firefox it results in undesired layout.
   */

  /**
   * Make an element the width of its parent.
   */

  /* Proportional widths: breakpoint 3 (large)
     ========================================================================== */

  /**
   * Specify the proportional width of an object.
   * Intentional redundancy build into each set of unit classes.
   * Supports: 2, 3, 4, 5, 6, 8, 10, 12 part
   */
}

/**
 * Word breaking
 *
 * Break strings when their length exceeds the width of their container.
 */

/**
 * Horizontal text alignment
 */

.u-textCenter {
  text-align: center !important;
}

/**
 * Inherit the ancestor's text color.
 */

/**
 * Enables font kerning in all browsers.
 * http://blog.typekit.com/2014/02/05/kerning-on-the-web/
 *
 * 1. Chrome (not Windows), Firefox, Safari 6+, iOS, Android
 * 2. Chrome (not Windows), Firefox, IE 10+
 * 3. Safari 7 and future browsers
 */

/**
 * Prevent whitespace wrapping
 */

/**
 * Text truncation
 *
 * Prevent text from wrapping onto multiple lines, and truncate with an
 * ellipsis.
 *
 * 1. Ensure that the node has a maximum width after which truncation can
 *    occur.
 * 2. Fix for IE 8/9 if `word-wrap: break-word` is in effect on ancestor
 *    nodes.
 */

/** @define Arrange */

/**
 * This component lets you lay out a row of cells in various ways. You can
 * specify whether a cell should be wide enough to fit its content, or take up
 * the remaining space in the row. It's also possible to give all cells an
 * equal width, and to control their vertical alignment.
 */

/**
 * 1. Protect against the component expanding beyond the confines of its
 *    container if properties affecting the box-model are applied to the
 *    component. Mainly necessary because of (5).
 * 2. Rely on table layout.
 * 3. Zero out the default spacing that might be on an element (e.g., `ul`).
 * 4. Make sure the component fills at least the full width of its parent.
 * 5. Reset the table-layout algorithm in case a component is nested.
 */

/**
 * There are two possible types of child. `sizeFill` will expand to fill all
 * of the remaining space not filled by `sizeFit` elements.
 *
 * 1. Zero out any default spacing that might be on an element (e.g., `li`);
 *    Margin has no effect when coupled with `display: table-cell`.
 * 2. All cells are top-aligned by default
 */

/**
 * Make sure the main content block expands to fill the remaining space.
 */

/**
 * Where possible, protect against large images breaking the layout. Prevent them from
 * exceeding the width of the main content block by making them fluid.
 *
 * Only work for all browsers with the `Arrange--equally` variant. For Firefox
 * and IE to constrain image dimensions for other layouts, large images will
 * need their width set to `100%`.
 */

/**
 * Defend against a side-effect of this layout pattern: images in
 * 'Arrange-sizeFit' cannot be fluid, otherwise they lose their ability to
 * provide size to a cell.
 */

/* Vertical alignment modifiers
   ========================================================================== */

/* Equal-width modifier
   ========================================================================== */

/**
 * This layout algorithm will create equal-width table cells, irrespective of
 * the width of their content.
 */

/**
 * Give the cells an equal width. This value ensures that Arrange is still 100%
 * wide when gutters are used in conjunctions with equal-width cells.
 *
 * It's recommended that only 'Arrange-sizeFill' be used for equal width cells.
 * Their inner images will automatically be responsive.
 */

/* Gutter modifier
   ========================================================================== */

/**
 * Add a gutter between cells
 *
 * NOTE: this can trigger a horizontal scrollbar if the component is as wide as
 * the viewport. Use padding on a container, or `overflow-x:hidden` to protect
 * against it.
 */

/** @define Button; use strict */

/**
 * The button classes are best applied to links, buttons, and submit inputs.
 * These components can be used in forms, as calls to action, or as part of the
 * general UI of the site/app.
 */

/**
 * 1. Corrects inability to style clickable `input` types in iOS.
 * 2. Normalize `box-sizing` across all elements that this component could be
 *    applied to.
 * 3. Inherit text color from ancestor.
 * 4. Inherit font styles from ancestor.
 * 5. Normalize `line-height`. For `input`, it can't be changed from `normal` in Firefox 4+.
 * 6. Prevent button text from being selectable.
 * 7. Make sure `input` will wrap text across multiple lines.
 */

.Button {
  -webkit-appearance: none;
  /* 1 */
  background: transparent;
  border-color: currentcolor;
  border-style: solid;
  border-width: 1px;
  box-sizing: border-box;
  /* 2 */
  color: inherit;
  /* 3 */
  cursor: pointer;
  display: inline-block;
  font: inherit;
  /* 4 */
  line-height: normal;
  /* 5 */
  margin: 0;
  padding: 0.4em 0.75em;
  position: relative;
  text-align: center;
  text-decoration: none;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
  /* 6 */
  white-space: normal;
  /* 7 */
}

/**
 * Remove excess padding and border in Firefox 4+
 */

.Button::-moz-focus-inner {
  border: 0;
  padding: 0;
}

/**
 * Work around a Firefox/IE bug where the transparent `button` background
 * results in a loss of the default `button` focus styles.
 */

.Button:focus {
  outline: 1px dotted;
  outline: 5px auto -webkit-focus-ring-color;
}

/**
 * UI states
 */

.Button:hover,
.Button:focus,
.Button:active {
  text-decoration: none;
}

.Button:disabled {
  cursor: default;
  opacity: 0.6;
}

/** @define FlexEmbed; use strict */

/**
 * Flexible media embeds
 *
 * For use with media embeds – such as videos, slideshows, or even images –
 * that need to retain a specific aspect ratio but adapt to the width of their
 * containing element.
 *
 * Based on: http://alistapart.com/article/creating-intrinsic-ratios-for-video
 */

/**
 * The aspect-ratio hack is applied to an empty element because it allows
 * the component to respect `max-height`. Default aspect ratio is 1:1.
 */

/**
 * Modifier: 3:1 aspect ratio
 */

/**
 * Modifier: 2:1 aspect ratio
 */

/**
 * Modifier: 16:9 aspect ratio
 */

/**
 * Modifier: 4:3 aspect ratio
 */

/**
 * Fit the content to the aspect ratio
 */

/** @define Grid; use strict */

/**
 * Core grid component
 *
 * DO NOT apply dimension or offset utilities to the `Grid` element. All cell
 * widths and offsets should be applied to child grid cells.
 */

/* Grid container
   ========================================================================== */

/**
 * All content must be contained within child `Grid-cell` elements.
 *
 * 1. Account for browser defaults of elements that might be the root node of
 *    the component.
 * 2. Remove inter-cell whitespace that appears between `inline-block` child
 *    elements.
 * 3. Ensure consistent default alignment.
 */

.Grid {
  display: block;
  /* 1 */
  font-size: 0;
  /* 2 */
  margin: 0;
  /* 1 */
  padding: 0;
  /* 1 */
  text-align: left;
  /* 3 */
}

/**
 * Modifier: center align all grid cells
 */

/**
 * Modifier: right align all grid cells
 */

/**
 * Modifier: middle-align grid cells
 */

/**
 * Modifier: bottom-align grid cells
 */

/**
 * Modifier: gutters
 *
 * NOTE: this can trigger a horizontal scrollbar if the component is as wide as
 * the viewport. Use padding on a container, or `overflow-x:hidden` to protect
 * against it.
 */

/* Grid cell
   ========================================================================== */

/**
 * No explicit width by default. Rely on combining `Grid-cell` with a dimension
 * utility or a component class that extends 'grid'.
 *
 * 1. Fundamentals of the non-float grid layout.
 * 2. Reset font size change made in `Grid`.
 * 3. Keeps content correctly aligned with the grid direction.
 * 4. Controls vertical positioning of units.
 * 5. Make cells full-width by default.
 */

.Grid-cell {
  box-sizing: border-box;
  display: inline-block;
  /* 1 */
  font-size: 1rem;
  /* 2 */
  margin: 0;
  padding: 0;
  text-align: left;
  /* 3 */
  vertical-align: top;
  /* 4 */
  width: 100%;
  /* 5 */
}

/**
 * Modifier: horizontally center one unit
 * Set a specific unit to be horizontally centered. Doesn't affect
 * any other units. Can still contain a child `Grid` object.
 */

.Grid-cell--center {
  display: block;
  margin: 0 auto;
}

/**
 * App styles
 */

/* ==================================================================

    MIXINS

   ================================================================== */

/**
 * Clearfix: for modern browsers.
 * 1. The space content is one way to avoid an Opera bug when the
 *    contenteditable attribute is included anywhere else in the document.
 *    Otherwise it causes space to appear at the top and bottom of elements
 *    that are clearfixed.
 * 2. The use of `table` rather than `block` is only necessary if using
 *    `:before` to contain the top-margins of child elements.
 */

/**
 * Absolute center
 * Req's a parent w/ 'position: relative'
 */

/**
 * Sizing
 * @link: http://www.sitepoint.com/sass-mixins-kickstart-project/
 */

/**
 * Position
 * @link: http://www.sitepoint.com/sass-mixins-kickstart-project/
 * @usage: .element { @include absolute(top 0 left 1em); }
 */

/**
 * Scut strip unit
 * http://davidtheclark.github.io/scut/strip-unit.html
 */

/**
 * Scut px to rem
 * http://davidtheclark.github.io/scut/rem.html
 * Requires: `scut-strip-unit`.
 * Renamed rem() from scut-rem() for ease of use.
 */

/**
 * Scut rem fallback
 * http://davidtheclark.github.io/scut/remFallback.html
 * Requires: scut-rem and scut-strip-unit.
 * Renamed remFallback() from scut-remFallback() for ease of use.
 */

/*
 * Scut font-face
 * http://davidtheclark.github.io/scut/font-face.html
 * Renamed font-face() from scut-font-face() for ease of use.
 */

/**
 * easy media queries
 * @include bp(tablet) { … };
 * http://css-tricks.com/conditional-media-query-mixins/
 * See also: foundation, bootstrap, inuit
 */

/* ==========================================================================

   VARIABLE SETTINGS

   ========================================================================== */

/**
 * Colours
 */

/**
 * Type sizes
 */

/**
 * Column sizes
 *
 =========================================================================
 todo: as map?
 =========================================================================
 */

/**
 * Spaces
 */

/**
 * Fonts
 */

@font-face {
  font-family: "LyonText-Regular";
  font-weight: normal;
  font-style: normal;
  src: url("/assets/build/fonts/LyonText-Regular.eot");
  src: url("/assets/build/fonts/LyonText-Regular.eot?#iefix") format("embedded-opentype"), url("/assets/build/fonts/LyonText-Regular.woff") format("woff"), url("/assets/build/fonts/LyonText-Regular.ttf") format("truetype"), url("/assets/build/fonts/LyonText-Regular.svg#LyonText-Regular") format("svg");
}

@font-face {
  font-family: "LyonText-RegularItalic";
  font-weight: normal;
  font-style: normal;
  src: url("/assets/build/fonts/LyonText-RegularItalic.eot");
  src: url("/assets/build/fonts/LyonText-RegularItalic.eot?#iefix") format("embedded-opentype"), url("/assets/build/fonts/LyonText-RegularItalic.woff") format("woff"), url("/assets/build/fonts/LyonText-RegularItalic.ttf") format("truetype"), url("/assets/build/fonts/LyonText-RegularItalic.svg#LyonText-RegularItalic") format("svg");
}

@font-face {
  font-family: "LyonText-SemiboldItalic";
  font-weight: normal;
  font-style: normal;
  src: url("/assets/build/fonts/LyonText-SemiboldItalic.eot");
  src: url("/assets/build/fonts/LyonText-SemiboldItalic.eot?#iefix") format("embedded-opentype"), url("/assets/build/fonts/LyonText-SemiboldItalic.woff") format("woff"), url("/assets/build/fonts/LyonText-SemiboldItalic.ttf") format("truetype"), url("/assets/build/fonts/LyonText-SemiboldItalic.svg#LyonText-SemiboldItalic") format("svg");
}

@font-face {
  font-family: "LyonText-Bold";
  font-weight: normal;
  font-style: normal;
  src: url("/assets/build/fonts/LyonText-Bold.eot");
  src: url("/assets/build/fonts/LyonText-Bold.eot?#iefix") format("embedded-opentype"), url("/assets/build/fonts/LyonText-Bold.woff") format("woff"), url("/assets/build/fonts/LyonText-Bold.ttf") format("truetype"), url("/assets/build/fonts/LyonText-Bold.svg#LyonText-Bold") format("svg");
}

@font-face {
  font-family: "LyonText-BoldItalic";
  font-weight: normal;
  font-style: normal;
  src: url("/assets/build/fonts/LyonText-BoldItalic.eot");
  src: url("/assets/build/fonts/LyonText-BoldItalic.eot?#iefix") format("embedded-opentype"), url("/assets/build/fonts/LyonText-BoldItalic.woff") format("woff"), url("/assets/build/fonts/LyonText-BoldItalic.ttf") format("truetype"), url("/assets/build/fonts/LyonText-BoldItalic.svg#LyonText-BoldItalic") format("svg");
}

@font-face {
  font-family: "FoundersGroteskCond-Lt";
  font-weight: normal;
  font-style: normal;
  src: url("/assets/build/fonts/FoundersGroteskCond-Lt.eot");
  src: url("/assets/build/fonts/FoundersGroteskCond-Lt.eot?#iefix") format("embedded-opentype"), url("/assets/build/fonts/FoundersGroteskCond-Lt.woff") format("woff"), url("/assets/build/fonts/FoundersGroteskCond-Lt.ttf") format("truetype"), url("/assets/build/fonts/FoundersGroteskCond-Lt.svg#FoundersGroteskCond-Lt") format("svg");
}

@font-face {
  font-family: "FoundersGroteskCond-Reg";
  font-weight: normal;
  font-style: normal;
  src: url("/assets/build/fonts/FoundersGroteskCond-Reg.eot");
  src: url("/assets/build/fonts/FoundersGroteskCond-Reg.eot?#iefix") format("embedded-opentype"), url("/assets/build/fonts/FoundersGroteskCond-Reg.woff") format("woff"), url("/assets/build/fonts/FoundersGroteskCond-Reg.ttf") format("truetype"), url("/assets/build/fonts/FoundersGroteskCond-Reg.svg#FoundersGroteskCond-Reg") format("svg");
}

@font-face {
  font-family: "FoundersGroteskCond-Med";
  font-weight: normal;
  font-style: normal;
  src: url("/assets/build/fonts/FoundersGroteskCond-Med.eot");
  src: url("/assets/build/fonts/FoundersGroteskCond-Med.eot?#iefix") format("embedded-opentype"), url("/assets/build/fonts/FoundersGroteskCond-Med.woff") format("woff"), url("/assets/build/fonts/FoundersGroteskCond-Med.ttf") format("truetype"), url("/assets/build/fonts/FoundersGroteskCond-Med.svg#FoundersGroteskCond-Med") format("svg");
}

@font-face {
  font-family: "FoundersGroteskCond-Bold";
  font-weight: normal;
  font-style: normal;
  src: url("/assets/build/fonts/FoundersGroteskCond-Bold.eot");
  src: url("/assets/build/fonts/FoundersGroteskCond-Bold.eot?#iefix") format("embedded-opentype"), url("/assets/build/fonts/FoundersGroteskCond-Bold.woff") format("woff"), url("/assets/build/fonts/FoundersGroteskCond-Bold.ttf") format("truetype"), url("/assets/build/fonts/FoundersGroteskCond-Bold.svg#FoundersGroteskCond-Bold") format("svg");
}

/**
 * Z-Index Scale (private vars)
 */

/* ==========================================================================

   SPACER HELPERS

   ========================================================================== */

/**
 * Spaces

$space-unit            : rem($base-line-height); // 39
$space--D6             : $space-unit / 6;        // 7px
$space--D3             : $space-unit / 3;        // 13px
$space--D2             : $space-unit / 2;        // 20px
$space--D1             : $space-unit / 1.33333;  // 29px
$space                 : $space-unit * 1;        // 39px
$space--X13            : $space-unit * 1.33333;  // 52px
$space--X15            : $space-unit * 1.5;      // 59px
$space--X2             : $space-unit * 2;        // 78px
$space--X25            : $space-unit * 2.5;      // 98px
$space--X3             : $space-unit * 3;        // 117px
$space--X4             : $space-unit * 4;        // 156px
$space--X5             : $space-unit * 5;        // 195px
$space--X6             : $space-unit * 6;        // 234px
$space--XL             : $space-unit * 10;       // 390px

 */

/* Margin spaces
   ========================================================================== */

.u-marginT {
  margin-top: 1.96875rem !important;
}

.u-marginTX15 {
  margin-top: 2.95312rem !important;
}

.u-marginBD1 {
  margin-bottom: 1.47657rem !important;
}

/* Padding spaces
   ========================================================================== */

/* Margin spaces (responsive)
   ========================================================================== */

@media (max-width: 29.9375em) {
  .u-marginT {
    margin-top: 1.18125rem !important;
  }

  .u-marginTX15 {
    margin-top: 1.77187rem !important;
  }

  .u-marginBD1 {
    margin-bottom: 0.88594rem !important;
  }
}

/* @media (max-width: 30em) { @content; } */

/* ==========================================================================

   HELPERS

   ========================================================================== */

/**
 * Hide or show things responsively
 */

/* uncss:ignore */

.u-hideMobile {
  display: none;
}

@media (min-width: 600px) {
  .u-hideMobile {
    display: block !important;
  }
}

/* uncss:ignore */

.u-hideMobileInline {
  display: none;
}

@media (min-width: 600px) {
  .u-hideMobileInline {
    display: inline-block !important;
  }
}

/* uncss:ignore */

@media (min-width: 1200px) {
  .u-lg-textCenter {
    text-align: center !important;
  }
}

/**
 * Full height or width
 */

/**
 * Rules
 */

/**
 * Background colors
 */

/**
 * Z-index mixin
 */

/* ==================================================================

   BASE

   ================================================================== */

/**
 * Set the global `box-sizing` state to `border-box`.
 * css-tricks.com/inheriting-box-sizing-probably-slightly-better-best-practice
 * paulirish.com/2012/box-sizing-border-box-ftw
 */

html {
  box-sizing: border-box;
}

*,
*:before,
*:after {
  box-sizing: inherit;
}

/**
 * Page-level styling from InuitCSS.
 *
 * 1. Set the default `font-size` and `line-height` for the entire project,
 *    sourced from our default variables. The `font-size` is calculated to exist
 *    in rems, the `line-height` is calculated to exist unitlessly.
 * 2. Force scrollbars to always be visible to prevent awkward ‘jumps’ when
 *    navigating between pages that do/do not have enough content to produce
 *    scrollbars naturally. Also req'd for [6].
 * 3. Ensure the page always fills at least the entire height of the viewport.
 * 4. Prevent iOS and IE text size adjust after device orientation change,
 *    without disabling user zoom. (Already in Suit).
 * 5. Fonts on OSX will look more consistent with other systems that do not
 *    render text using sub-pixel anti-aliasing.
 * 6. Fluid scroll for Safari mobile. Requires [2] "overflow-y: scroll".
 *    See: http://css-tricks.com/snippets/css/momentum-scrolling-on-ios-overflow-elements/
 *    [Currently seems to not work though? Needs research].
 * 7. From here down, a typography reset site-wide.
 */

html {
  background-color: #fdfdfd;
  color: #333;
  height: 100%;
  /* 3 */
  font-size: 80%;
  /* 1 */
  line-height: 1.5;
  /* 1 */
  min-height: 100%;
  /* 3 */
  overflow-y: scroll;
  /* 2 */
  -webkit-text-size-adjust: 100%;
  -ms-text-size-adjust: 100%;
  text-size-adjust: 100%;
  /* 4 */
  -moz-osx-font-smoothing: grayscale;
  /* 5 */
  -webkit-font-smoothing: antialiased;
  /* 5 */
  -webkit-overflow-scrolling: touch;
  /* 6 */
}

@media (min-width: 767px) {
  html {
    font-size: 100%;
  }
}

/* ==========================================================================

    IMAGES

   ========================================================================== */

/**
 * 1. Fluid images for responsive purposes.
 * 2. Offset `alt` text from surrounding copy.
 * 3. Setting `vertical-align` removes the whitespace that appears under `img`
 *    elements when they are dropped into a page as-is. Safer alternative to
 *    using `display: block;`.
 */

img {
  max-width: 100%;
  /* [1] */
  font-style: italic;
  /* [2] */
  vertical-align: middle;
  /* [3] */
}

/**
 * 1. Google Maps breaks if `max-width: 100%` acts upon it; use their selector
 *    to remove the effects.
 * 2. If a `width` and/or `height` attribute have been explicitly defined, let’s
 *    not make the image fluid.
 */

/**
 * Circle it.
 */

/**
 * Theme the zoom.js overlay
 */

/* ==========================================================================

    TYPOGRAPHIC ANCHORS

   ========================================================================== */

/**
 * Anchor styles mixin
 */

/* Brand text anchor
   ========================================================================== */

/* Grey text anchor
   ========================================================================== */

/* White text anchor
   ========================================================================== */

/* Large headline anchor
   ========================================================================== */

/* No visual appearance
   ========================================================================== */

/* Classed
   ========================================================================== */

a {
  background-image: -webkit-linear-gradient(top, rgba(51, 51, 51, 0) 50%, rgba(51, 51, 51, 0.7) 50%);
  background-image: linear-gradient(to bottom, rgba(51, 51, 51, 0) 50%, rgba(51, 51, 51, 0.7) 50%);
  background-repeat: repeat-x;
  background-size: 2px 2px;
  background-position: 0 100%;
  color: currentColor;
  padding-bottom: 0.25rem;
  text-decoration: none;
  /* @media (max-width: 30em) { @content; } */
}

@media (max-width: 29.9375em) {
  a {
    background-position: 0 1.125rem;
  }
}

a:hover,
a:active,
a:focus {
  background-image: none;
  color: #0071bc;
  text-decoration: none;
}

.u-linkInvisible {
  background-image: none !important;
  background-repeat: repeat-x;
  background-size: 2px 2px;
  background-position: 0 100%;
  color: inherit;
  padding-bottom: 0.25rem;
  text-decoration: none;
  /* @media (max-width: 30em) { @content; } */
}

@media (max-width: 29.9375em) {
  .u-linkInvisible {
    background-position: 0 1.125rem;
  }
}

.u-linkInvisible:hover,
.u-linkInvisible:active,
.u-linkInvisible:focus {
  background-image: none;
  color: inherit;
  text-decoration: none;
}

/* ==========================================================================

    TYPOGRAPHIC ARROWS

   ========================================================================== */

.arrow-right {
  border-width: .31em 0 .31em .5em;
  border-top-color: transparent;
  border-left-color: #737373;
  margin-left: 0.3125rem;
}

.Arrow-right:after {
  border-top: .3em solid transparent;
  border-bottom: .3em solid transparent;
  border-left: .3em solid;
  content: "";
  display: inline-block;
  height: 0;
  margin-left: .35rem;
  -webkit-transform: translateY(-0.125rem);
  transform: translateY(-0.125rem);
  vertical-align: middle;
  width: 0;
}

h1 {
  font-style: normal;
  font-weight: normal;
  font-size: 51px;
  font-size: 3.1875rem;
  border-bottom: 1px solid currentColor;
  color: white;
  font-family: "FoundersGroteskCond-Lt";
  letter-spacing: 0.03em;
  line-height: 1;
  margin-bottom: 1.47656rem;
  padding-bottom: 0.49219rem;
  text-transform: lowercase;
}

h2 {
  font-style: normal;
  font-weight: normal;
  font-size: 20px;
  font-size: 1.25rem;
  color: #333;
  font-family: "FoundersGroteskCond-Bold";
  letter-spacing: 0.05em;
  line-height: 1;
  margin-bottom: 2.95312rem;
  text-transform: uppercase;
}

h2 span {
  border-bottom: 1px solid #333;
  padding-bottom: 0.49219rem;
}

h3 {
  font-style: normal;
  font-weight: normal;
  font-size: 26px;
  font-size: 1.625rem;
  font-size: 26px;
  font-size: 1.625rem;
  color: #333;
  font-family: "FoundersGroteskCond-Bold";
  line-height: calc(1.625rem * 1.5);
  letter-spacing: 0.03em;
  margin-bottom: 0.49219rem;
  margin-bottom: 0;
}

.u-textSm {
  font-size: 17px;
  font-size: 1.0625rem;
}

html {
  color: #333;
  font-family: "LyonText-Regular", Georgia, Times, serif;
  font-size: 80%;
  line-height: 1.5;
  text-align: left;
  text-rendering: optimizeLegibility;
  -webkit-text-size-adjust: 100%;
  -ms-text-size-adjust: 100%;
  text-size-adjust: 100%;
  -moz-osx-font-smoothing: grayscale;
  -webkit-font-smoothing: antialiased;
}

@media (min-width: 992px) {
  html {
    font-size: 90%;
  }
}

@media (min-width: 767px) {
  html {
    font-size: 100%;
  }
}

ul,
li,
p {
  font-style: normal;
  font-weight: normal;
  font-size: 21px;
  font-size: 1.3125rem;
  color: #333;
  font-family: "LyonText-Regular", Georgia, Times, serif;
  letter-spacing: 0;
  line-height: 1.5;
  text-align: left;
  text-transform: none;
}

ul {
  list-style-type: none;
}

em {
  font-style: normal;
  font-weight: normal;
  font-family: "LyonText-RegularItalic", Georgia, Times, serif;
}

/* ==========================================================================

    TYPOGRAPHIC VERTICAL RHYTHM

   ========================================================================== */

/**
 *
 * Where `margin-bottom` is concerned,this value will be the same as the
 * base line-height. This allows us to keep a consistent vertical rhythm.
 * As per: csswizardry.com/2012/06/single-direction-margin-declarations
 *
 */

h1,
h2,
h3,
ul,
li,
p {
  margin-bottom: 0.98438rem;
}

/**
 * Where `margin-left` is concerned we want to try and indent certain elements
 * by a consistent amount. Define that amount once, here.
 */

ul {
  /* margin-left: $space--D1; */
}

/**
 * Manage section block spacings only with headlines
 */

.Container p:last-child,
.Container p:last-child a,
.Container li:last-child,
.Container li:last-child a {
  margin-bottom: 0;
}

/* ==================================================================

   BUTTONS

   ================================================================== */

.Button {
  font-style: normal;
  font-weight: normal;
  font-size: 20px;
  font-size: 1.25rem;
  color: #333;
  font-family: "FoundersGroteskCond-Bold";
  letter-spacing: 0.05em;
  line-height: 1;
  margin-bottom: 2.95312rem;
  text-transform: uppercase;
  background-color: #333;
  border: 0;
  border-radius: 0.25rem;
  color: white;
  margin-bottom: 0;
  padding: 1.125rem 2rem 0.75rem;
  text-align: center;
}

.Button:hover,
.Button:active,
.Button:focus {
  color: #e6e6e6;
}

.Button--lg {
  padding: 1.125rem 3.9375rem 0.75rem;
}

.Button--rev {
  background-color: white;
  color: #333;
}

.Button--rev:hover,
.Button--rev:active,
.Button--rev:focus {
  background-color: #e6e6e6;
  color: #333;
}

.Button--transparent {
  background-color: #F5F4F5;
  color: #333;
  cursor: default;
}

.Button--transparent:hover,
.Button--transparent:active,
.Button--transparent:focus {
  color: #333;
}

/**
 * Inline list of small buttons
 */

/**
 * Button w/ background transition
 * From: http://ianlunn.github.io/Hover/
 *
 * 1. This code introduces the block-inline spacing
 *    problem. Not sure of the culprit.
 */

/**
 * Button w/ border transition
 * From: http://ianlunn.github.io/Hover/
 */

/**
 * Button as data-toggle.
 */

/* ==========================================================================

    MEDIA OBJECT
    https://github.com/csswizardry/inuit.css/blob/c737cf1694e9db4d597f8d081091b8529614e370/objects/_media.scss

   ========================================================================== */

/**
 * Place any image- and text-like content side-by-side, as per:
 * stubbornella.org/content/2010/06/25/the-media-object-saves-hundreds-of-lines-of-code
 * E.g.:
 *
   <div class=media>
       <img src=http://placekitten.com/200/300 alt="" class=media__img>
       <p class=media__body>Lorem ipsum dolor sit amet, consectetur adipisicing elit,
       sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.</p>
   </div>
 *
 * Demo: jsfiddle.net/inuitcss/cf4Qs
 *
 */

/* ==================================================================

    LAYOUT

   ================================================================== */

/**
 * Body
 */

body {
  height: 100%;
  overflow-y: scroll;
  padding: 0;
}

/**
 * HTML5 content blocks.
 */

/**
 * The content column container.
 */

.Container {
  margin: 0 auto;
  max-width: 60rem;
  padding: 0 1.96875rem;
  position: relative;
}

.Container:before,
.Container:after {
  content: " ";
  display: table;
}

.Container:after {
  clear: both;
}

@media (min-width: 992px) {
  .Container {
    padding: 0;
  }
}

.Header {
  background-color: #F5F4F5;
  max-height: 36.25rem;
}

@media (min-width: 767px) {
  .Header {
    height: 43.75rem;
  }
}

.Header-nav {
  margin: 1.96875rem 0;
  position: relative;
}

.Header-logo {
  margin-bottom: 0;
}

.Header-logo a {
  background-image: none;
}

.Header-logo img {
  height: 2.25rem;
}

@media (min-width: 767px) {
  .Header-logo img {
    height: 2.5rem;
  }
}

.Header-menu {
  position: absolute;
  top: 0.8125rem;
  right: 0;
  margin: 0;
}

.Header-menu li {
  font-style: normal;
  font-weight: normal;
  font-size: 21px;
  font-size: 1.3125rem;
  font-family: "FoundersGroteskCond-Med";
  color: #333;
  letter-spacing: 0.02em;
  line-height: 1.5;
  margin: 0 0 2.95312rem;
  color: white;
  display: inline-block;
  margin: 0;
}

.Header-menu li a {
  background-position: 0 21px !important;
}

.Header-menu li:not(:last-child) {
  margin-right: 0.59062rem;
}

.Header-menu li:last-child:before {
  content: "•";
  display: inline-block;
  margin-right: 0.59062rem;
}

.Header-menu li a {
  background-image: none;
  color: currentColor;
  text-decoration: none;
  display: inline-block;
  -webkit-transform: translateZ(0);
  transform: translateZ(0);
  /* @include improveAntiAlias(); */
  -webkit-backface-visibility: hidden;
  backface-visibility: hidden;
  -moz-osx-font-smoothing: grayscale;
  /* @include anticipatePainting(); */
  display: inline-block;
  border-radius: 0;
  padding-bottom: 0;
  position: relative;
  color: white;
}

.Header-menu li a:hover,
.Header-menu li a:active,
.Header-menu li a:focus {
  background-image: none;
  color: #0071bc;
  text-decoration: none;
}

.Header-menu li a:before {
  background-color: white;
  bottom: 0;
  content: "";
  height: 0.0625rem;
  left: 0;
  position: absolute;
  right: 100%;
  -webkit-transition-property: right;
  transition-property: right;
  -webkit-transition-duration: 0.15s;
  transition-duration: 0.15s;
  -webkit-transition-timing-function: ease-out;
  transition-timing-function: ease-out;
  z-index: -1;
}

@media (min-width: 767px) {
  .Header-menu li a:before {
    height: 0.0625rem;
  }
}

.Header-menu li a:hover,
.Header-menu li a:active,
.Header-menu li a:focus {
  color: white;
  padding-bottom: 0rem;
}

.Header-menu li a:hover:before,
.Header-menu li a:focus:before,
.Header-menu li a:active:before {
  right: 0;
}

.Header-menu li a:focus:before,
.Header-menu li a:active:before {
  background-color: #333;
}

.Header-directive {
  margin-top: 3.9375rem;
}

.Header-directive p {
  font-size: 22px;
  font-size: 1.375rem;
  color: white;
}

.Header-directive p span {
  font-size: 26px;
  font-size: 1.625rem;
  font-family: "FoundersGroteskCond-Bold";
  letter-spacing: 0.02em;
  line-height: 31.5px;
}

.Footer {
  background-color: #F5F4F5;
}

.Footer-nav {
  border-top: 1px solid rgba(153, 153, 153, 0.4);
  padding: 1.96875rem 0;
  position: relative;
}

.Footer-logo {
  margin-bottom: 0;
}

.Footer-logo a {
  background-image: none;
}

.Footer-logo img {
  height: 2.25rem;
}

@media (min-width: 767px) {
  .Footer-logo img {
    height: 2.5rem;
  }
}

.Footer-meta {
  margin-top: 1rem;
}

.Footer-meta li,
.Footer-meta p,
.Footer-meta a {
  background-image: none;
  color: currentColor;
  text-decoration: none;
  font-style: normal;
  font-weight: normal;
  font-size: 21px;
  font-size: 1.3125rem;
  font-family: "FoundersGroteskCond-Med";
  color: #333;
  letter-spacing: 0.02em;
  line-height: 1.5;
  margin: 0 0 2.95312rem;
  color: #999 !important;
  font-family: "FoundersGroteskCond-Reg";
  letter-spacing: 0.03em;
  line-height: 1.35;
  margin: 0;
}

.Footer-meta li:hover,
.Footer-meta li:active,
.Footer-meta li:focus,
.Footer-meta p:hover,
.Footer-meta p:active,
.Footer-meta p:focus,
.Footer-meta a:hover,
.Footer-meta a:active,
.Footer-meta a:focus {
  background-image: none;
  color: #0071bc;
  text-decoration: none;
}

.Footer-meta li a,
.Footer-meta p a {
  background-position: 0 21px !important;
}

.Footer-meta li:not(:last-child) {
  margin-right: 0.59062rem;
}

.Section {
  margin: 0 0 3.9375rem 0;
  padding-top: 5.90625rem;
}

@media (min-width: 600px) {
  .Section {
    margin-bottom: 5.90625rem;
  }
}

.Section#who {
  background-color: #f2ebf2;
  border-bottom: 0.3125rem solid #333;
  border-top: 0.3125rem solid #333;
  margin-bottom: 0;
  padding: 4.92188rem 0;
  position: relative;
}

.Section#who > .Section-item {
  margin-bottom: 0;
}

.Section#who .Who-directive {
  position: absolute;
  bottom: -1.6875rem;
  text-align: center;
  width: 100%;
}

.Section-item {
  position: relative;
}

.Section-item:not(:last-child) {
  margin-bottom: 3.9375rem;
}

@media (min-width: 600px) {
  .Section-item:not(:last-child) {
    margin-bottom: 5.90625rem;
  }
}

.Section-item:before {
  background-position: 50%;
  background-repeat: no-repeat;
  background-size: contain;
  content: " ";
  display: block;
  height: 7.5rem;
  left: -10rem;
  position: absolute;
  top: -0.65625rem;
  width: 10.4375rem;
}

@media (min-width: 600px) {
  .Section-item:before {
    height: 10.8125rem;
    left: -11.9375rem;
    width: 10.4375rem;
  }
}

.Section-item--advice:before {
  background-image: url(/assets/build/img/icon_advice.png);
}

.Section-item--saving:before {
  background-image: url(/assets/build/img/icon_saving.png);
}

.Section-item--sustainable:before {
  background-image: url(/assets/build/img/icon_sustainable.png);
}

.Section-intro {
  font-family: "LyonText-Bold", Georgia, Times, serif;
}

.Section-intro span {
  font-family: "LyonText-BoldItalic", Georgia, Times, serif;
}

.Section-directive {
  margin: 5.90625rem auto;
  position: relative;
  text-align: center;
}

.Section-directive:before {
  background-color: #333;
  content: "";
  display: block;
  height: 0.3125rem;
  position: absolute;
  top: calc(50% - 0.15625rem);
  width: 100%;
}

.Section-directive.Section-directive--light {
  margin: 3.9375rem 0 2.95312rem;
}

.Section-directive.Section-directive--light:before {
  height: 0.0625rem;
  top: calc(50% - 0.03125rem);
}

.page-thanks {
  background-color: #F5F4F5;
}

/* uncss:ignore */

.page-thanks .Header {
  height: auto;
  margin-bottom: 3.9375rem;
}

@media (min-width: 600px) {
  .page-thanks .Header {
    margin-bottom: 5.90625rem;
  }
}

/* uncss:ignore */

.page-thanks .Header h1,
.page-thanks .Header p {
  color: #333;
}

/* ==========================================================================

    CONTACT BLOCK ELEMENT

   ========================================================================== */

.CoverImage {
  background-position: 58% 50%;
  background-repeat: no-repeat;
  background-size: cover;
  display: block;
  height: 100%;
  margin: 0 auto;
  position: relative;
  width: 100%;
  content: none;
  background-image: none;
  color: currentColor;
  text-decoration: none;
}

.CoverImage:hover,
.CoverImage:active,
.CoverImage:focus {
  background-image: none;
  color: #0071bc;
  text-decoration: none;
}

@media (min-width: 767px) {
  .CoverImage {
    background-position: 50%;
  }
}

#contact {
  background-color: #F5F4F5;
  margin-top: 3.9375rem;
  padding-bottom: 5.90625rem;
}

@media (min-width: 600px) {
  #contact {
    margin-top: 5.90625rem;
  }
}

input,
textarea,
select {
  font-style: normal;
  font-weight: normal;
  font-size: 21px;
  font-size: 1.3125rem;
  color: #333;
  font-family: "LyonText-Regular", Georgia, Times, serif;
  letter-spacing: 0;
  line-height: 1.5;
  text-align: left;
  text-transform: none;
  font-size: 21px;
  font-size: 1.3125rem;
  background: white;
  border: 0;
  border: 1px solid rgba(51, 51, 51, 0.2);
  border-radius: 0.25rem;
  color: #737373;
  display: inline-block;
  padding: 0.9375rem 1.25rem;
  resize: none;
  -webkit-appearance: none;
  width: 100%;
}

input:not(:last-child),
textarea:not(:last-child) {
  margin: 0 0 0.98438rem;
}

input:-moz-placeholder,
textarea:-moz-placeholder,
select:-moz-placeholder {
  color: rgba(51, 51, 51, 0.5);
}

input::-moz-placeholder,
textarea::-moz-placeholder,
select::-moz-placeholder {
  color: rgba(51, 51, 51, 0.5);
}

input:-ms-input-placeholder,
textarea:-ms-input-placeholder,
select:-ms-input-placeholder {
  color: rgba(51, 51, 51, 0.5);
}

input:hover,
input:active,
input:focus,
textarea:hover,
textarea:active,
textarea:focus,
select:hover,
select:active,
select:focus {
  outline: 0;
}

.Select-styled {
  font-size: 20px;
  font-size: 1.25rem;
  color: rgba(51, 51, 51, 0.5);
  margin: 0 0 0.98438rem;
  position: relative;
}

.Select-styled select {
  color: rgba(51, 51, 51, 0.5);
}

.Select-styled:after {
  border-top: .3em solid;
  border-left: .3em solid transparent;
  border-right: .3em solid transparent;
  content: "";
  display: block;
  height: 0;
  margin-left: .35rem;
  position: absolute;
  right: 0.98438rem;
  top: 50%;
  -webkit-transform: translateY(-0.125rem);
  transform: translateY(-0.125rem);
  vertical-align: middle;
  width: 0;
}

/* ==========================================================================

   MODAL COMPONENT

   ========================================================================== */

/**
 * Modal structure.
 */

/* uncss:ignore */

.Modal.is-displayed {
  z-index: 8001;
  opacity: 1;
  overflow-x: hidden;
  overflow-y: auto;
  -webkit-transition: z-index 0s ease, opacity 250ms ease;
  transition: z-index 0s ease, opacity 250ms ease;
}

/**
 * Modal close icon.
 * 1. Override Suit here cause it stuffs the appearance when clicked.
 */

button:focus {
  outline: none;
}

/* 1 */

/*# sourceMappingURL=data:application/json;base64, */
